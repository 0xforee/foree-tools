#!/bin/bash
TMP_IPS=()
TMP_LOCATION=()
SEARCH_MODE=

SOFT_DIR=$(dirname $(realpath $0))
source $SOFT_DIR/foree-tools.conf
source $SOFT_DIR/common.sh

PROJECT_DIR=$SOFT_DIR
PROJECT_CONF=$SOFT_DIR/foree-tools.conf
#source $PROJECT_CONF

function bringup_ssh
{
    local LOGIN_IP=
    local count=
    local i=0

    for result_i in "${!TMP_LOCATION[@]}"
    do
        if [ -n "${TMP_LOCATION[$result_i]}" ];then
            flog -D "$FUNCNAME: result = ${TMP_LOCATION[$result_i]}"
            flog -D "$FUNCNAME: ip = ${BRINGUP_IPS[$result_i]}"
            echo
            flog -W "IP: ${BRINGUP_IPS[$result_i]}"
            echo
            flog -W "LOCATION: ${TMP_LOCATION[$result_i]}"
            TMP_IPS[$((i++))]=${BRINGUP_IPS[$result_i]}
        fi
    done

    #搜索模式，只做打印
    if [ "$SEARCH_MODE" = "true" ];then
        exit 0
    fi

    count=${#TMP_IPS[@]}

    # 未找到，全部打印选择
    if [ $count -eq '0' ];then
        echo "not fount"
        server_info
        # 传递数组名称
        LOGIN_IP=$(do_choice ${BRINGUP_IPS[*]})
    # 唯一
    elif [ $count -eq '1' ];then
        flog -D "LOGINIP: ${TMP_IPS[0]}"
        LOGIN_IP=${TMP_IPS[0]}
    # 找到多个结果，打印选择
    else
        LOGIN_IP=$(do_choice ${TMP_IPS[*]})
    fi
        
    ssh bringup@$LOGIN_IP
    
}

# 传递IP数组名称,然后做对应的选择
function do_choice
{
    local LOGIN_IP=
    local ARRAY_IPS=( $@ )

    count=${#ARRAY_IPS[@]}

    flog -W "which server you want to login ?"
    flog -W "<1...$count>?"
    read selection

    if [ -z $selection ];then
        LOGIN_IP=${ARRAY_IPS[0]}
    else
        #如果选择不为0,且小于等于数组大小,并且选择是个数字,那么就去选择IP
        if [ $selection -ne '0' -a $selection -le $count ] && [[ $selection =~ [0-9]* ]];then
            LOGIN_IP=${ARRAY_IPS[$(($selection-1))]}
    #        is_first_login $(($selection-1))
        else
            flog -W "输入错误,请在1...${count}中选择"
        fi
    fi

    echo $LOGIN_IP

}

function server_info
{

    for local_i in ${!BRINGUP_IPS[@]}
    do
        echo "$((local_i+1)). ${BRINGUP_IPS[$local_i]}"
        cat $PROJECT_DIR/${BRINGUP_PROJECT_LIST[$local_i]}|grep -v ^#
    done

}

function is_first_login
{
    if [ -z "$1" ];then
        echo "input error"
    elif [ "${FIRST_LOGIN[$1]}" = "true" ]; then
        echo "first login"
        if [ -f ~/.ssh/id_rsa.pub ];then
            ssh-copy-id -i ~/.ssh/id_rsa.pub bringup@${BRINGUP_IPS[$1]} 2>&1 > /dev/null
            FIRST_LOGIN[$1]="false"
            for i in ${!FIRST_LOGIN[@]}
            do
                sed -i "/FIRST_LOGIN/ s/true/${FIRST_LOGIN[$i]}/" $PROJECT_CONF
            done
        else
            echo -e "\033[33m If you want to login without input passwd \033[0m"
            echo -e "\033[33m You must generate your rsa key first!! \033[0m"
            flog -I "Generate now(y/n)?"
            yes_or_no
            if [ $? -eq '1' ];then
                ssh-keygen -t rsa
                is_first_login $1
            fi
        fi
    fi
}

function _search_branch
{
    local i=0
    local HERE=`pwd`
    local SEARCH_BRANCH=$1

    cd $PROJECT_DIR

    SERVER_LIST=$( ls SERVER_* )
    for SERVER in $SERVER_LIST
    do
        #在server_list中搜索关键字，不区分大小写，且支持#注释
        search_result=$( grep -i "\/$SEARCH_BRANCH" $SERVER |grep -v ^# )
        TMP_LOCATION[$((i++))]="$search_result"
    done

    cd $HERE

    flog -D result = ${TMP_LOCATION[0]}
    flog -D result2 = ${TMP_LOCATION[2]}

    bringup_ssh

}

function usage
{
    echo "Usage: `basename $0` [ KEYWORD ] [ -s KEYWORD ]"
    exit 1
}

function main
{
    ARGS=`getopt -o :s:h --long search:,help -- "$@"`

    # 参数输入错误时的提示
    if [ $? != 0 ];then
        usage
        exit 1
    fi

    eval set -- "${ARGS}"

    while true
    do
        case "$1" in
            -s|--search)
                #search mode
                SEARCH_MODE=true
                SEARCH_BRANCH=$2
                shift 2
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            --)
                shift
                break
                ;;
        esac
    done

    if [ -n "$SEARCH_BRANCH" -a $# -ne '0' ];then
        usage
    else
        #解析命令行其他参数
        for arg in $@
        do
            echo "processing $arg"
            SEARCH_BRANCH=$arg
        done
    fi

    _search_branch $SEARCH_BRANCH

}

#bringup_ssh $@
main $@
